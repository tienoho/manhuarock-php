var curScroll, settings = { readingMode: null, readingDirection: "rtl", quality: "medium" }; const currentUrl = new URL(window.location.href); function initSettings() { Cookies.get("mr_settings") || localStorage.getItem("settings") ? settings = JSON.parse(settings = Cookies.get("mr_settings") || localStorage.getItem("settings")) : saveSettings() } function saveSettings() { $(".read_tool").removeClass("active"), isLoggedIn && $.post("/ajax/user/settings", { settings }), localStorage.setItem("settings", JSON.stringify(settings)), Cookies.set("mr_settings", JSON.stringify(settings), { path: "/", expires: 365 }) } initSettings(); var readingBy = $("#wrapper").data("reading-by"), continueReading = null, firstLoad = !0, currentImageIndex = 0, oldImageIndex = 0, totalImage = 0, numberImagesPreload = 4, touchstartX = 0, touchstartY = 0, touchendX = 0, touchendY = 0, isRead = !1; function resetHeight() { if ("horizontal" === settings.readingMode) { var e = !1, t = window.innerHeight, a = $(".ds-image.active").find("img"); a.on("load", function () { e = !0, t = $(this).height() + 130, document.getElementById("main-wrapper").style.height = t + "px" }), e || (void 0 !== a.height() && a.height() > t && (t = a.height() + 130), document.getElementById("main-wrapper").style.height = t + "px") } } window.addEventListener("contextmenu", function (e) { e.preventDefault() }, !1), window.addEventListener("dragstart", function (e) { e.preventDefault() }, !1), window.addEventListener("resize", function () { "horizontal" === settings.readingMode && resetHeight() }), document.addEventListener("keyup", function (e) { switch (e.key) { case "ArrowRight": "horizontal" == settings.readingMode ? "ltr" === settings.readingDirection ? hozNextImage() : hozPrevImage() : nextChapterVolume(); break; case "ArrowLeft": "horizontal" == settings.readingMode ? "ltr" === settings.readingDirection ? hozPrevImage() : hozNextImage() : prevChapterVolume() } }); var doc = document.documentElement, prevScroll = window.scrollY || doc.scrollTop, direction = null, prevDirection = null, header = document.getElementById("wrapper"); function handleVerticalScroll() { $(".iv-card").each(function () { var e = parseInt($(this).data("number")); isInViewport(this) && e !== currentImageIndex && (currentImageIndex = e, verShowImage()) }), direction = (curScroll = window.scrollY || doc.scrollTop) > prevScroll ? "down" : "up", prevScroll = curScroll, direction !== prevDirection && ("down" === direction && curScroll > 200 ? (header.classList.add("top-hide"), prevDirection = direction) : "up" === direction && (header.classList.remove("top-hide"), prevDirection = direction)) } function hozShowImage() { currentImageIndex === totalImage - 1 ? $(".hoz-next").addClass("disabled") && $(".hoz-next-hide").hide() : $(".hoz-next").removeClass("disabled") && $(".hoz-next-hide").show(), 0 === currentImageIndex ? $(".hoz-prev").addClass("disabled") : $(".hoz-prev").removeClass("disabled"), $(".hoz-current-index").text((currentImageIndex + 1).toString().padStart(totalImage.toString().length, "0")); var e = document.getElementsByClassName("ds-image").item(currentImageIndex); if ($(".ds-image").removeClass("active"), $(".ds-image").hide(), $(e).addClass("active"), $(e).show(), currentImageIndex < totalImage - 1) for (var t = currentImageIndex; t <= currentImageIndex + numberImagesPreload; t++)t < totalImage - 1 && hozProcessingImage(t); resetHeight() } function verShowImage() { if (currentImageIndex <= totalImage - 2) for (var e = currentImageIndex; e <= currentImageIndex + numberImagesPreload; e++)e <= totalImage - 1 && verProcessingImage(e) } function hozProcessingImage(e) { var t = document.getElementsByClassName("ds-image").item(e); t.classList.contains("loaded") || (t.classList.add("loaded"), createImageElement(t, $(t).data("url"), "image-horizontal")), t.scrollIntoView() } function verProcessingImage(e) { var t = document.getElementsByClassName("iv-card").item(e); t.classList.contains("loaded") || (t.classList.add("loaded"), createImageElement(t, $(t).data("url"), "image-vertical")) } function hozNextImage() { currentImageIndex < totalImage - 1 && (currentImageIndex++, hozShowImage()) } function hozPrevImage() { currentImageIndex > 0 && (currentImageIndex--, hozShowImage()) } function activeSettings() { settings.readingMode ? ("vertical" === settings.readingMode ? $("body").addClass("page-reader-ver") : $("body").removeClass("page-reader-ver"), $(".hr-setting").show(), $(".mode-item[data-value=" + settings.readingMode + "]").addClass("active"), $("#current-mode").text(settings.readingMode.charAt(0).toUpperCase() + settings.readingMode.slice(1)), getChaptersOrVolumes()) : ($("#first-read").show(), getChaptersOrVolumes()), $(".direction-item[data-value=" + settings.readingDirection + "]").addClass("active"), $("#current-direction").text($(".direction-item.active").text()), $(".quality-item[data-value=" + settings.quality + "]").addClass("active"), $("#current-quality").text($(".quality-item.active").text()) } function resetWhenChangeChapVol() { "vertical" === settings.readingMode ? $(window).scrollTop(0) : currentImageIndex = 0 } function nextChapterVolume() { resetWhenChangeChapVol(); var e = $(".reading-item.active").prev(); if (e.length > 0) { e.click(); return } alert("Đ\xe3 đọc đến chương mới nhất!") } function prevChapterVolume() { resetWhenChangeChapVol(); var e = $(".reading-item.active").next(); e.length > 0 && e.click() } $(document).ready(function () { readingListInfo("read"), $(document).on("click", "#vertical-content", function (e) { $("html, body").animate({ scrollTop: $(window).scrollTop() + 350 }, 300) }), $(".im-toggle").click(function (e) { $(".c_b-list").toggleClass("active") }), $(".ad-toggle").click(function (e) { $(".page-reader").toggleClass("pr-full") }), $(".read-tips-follow").click(function (e) { $(this).hide() }), $(".item-hide").click(function (e) { $(".read-tips-keyboard").addClass("rtk-hide") }), $(".kb-icon").click(function (e) { $(".read-tips-keyboard").removeClass("rtk-hide") }), $(".rc-close").click(function (e) { $("body").removeClass("show-comment") }), $(".hr-setting, #rt-close").click(function (e) { $(".read_tool").toggleClass("active") }), $(".hr-comment, .comment-bottom-button .btn").click(function (e) { $("body").toggleClass("show-comment") }) }), $(document).on("shown.bs.dropdown", "#dropdown-chapters,#dropdown-volumes", function () { $(this).find(".search-reading-item").focus(), $(".reading-item.active").parent().scrollTo(".reading-item.active", { duration: 300 }) }), $(document).on("click", ".mode-item", function (e) { settings.readingMode = $(this).data("value"), "vertical" === settings.readingMode ? $("body").addClass("page-reader-ver") : (window.removeEventListener("scroll", handleVerticalScroll), $("body").removeClass("page-reader-ver")), $(".hr-setting").show(), $(".mode-item").removeClass("active"), $(this).addClass("active"), $("#current-mode").text(settings.readingMode.charAt(0).toUpperCase() + settings.readingMode.slice(1)), saveSettings(), getImages() }), $(document).on("click", ".quality-item", function (e) { settings.quality = $(this).data("value"), $(".quality-item").removeClass("active"), $(this).addClass("active"), $("#current-quality").text($(this).text()), saveSettings(), getImages() }), $(document).on("click", ".direction-item", function (e) { settings.readingDirection = $(this).data("value"), $(".direction-item").removeClass("active"), $(this).addClass("active"), $("#current-direction").text($(this).text()), $(".hoz-controls").hide(), $(".hoz-controls-" + settings.readingDirection).show(), $("#hoz-btn-next").removeClass("ltr"), $("#hoz-btn-next").removeClass("rtl"), $("#hoz-btn-next").addClass(settings.readingDirection), saveSettings() }), $(document).on("click", ".reading-item", function (e) { e.preventDefault(), $(".reading-item").removeClass("active"), $(this).addClass("active"), firstLoad ? (firstLoad = !1, history.pushState({}, "", $(this).find("a").attr("href") + currentUrl.search)) : history.pushState({}, "", $(this).find("a").attr("href")); var t = $(this).find("a").data("shortname"); $("#current-chapter").text(t), readingId = $(this).data("id"), 1 === parseInt($(this).data("reading-mode")) && (settings.readingMode = "vertical"), getImages() }), activeSettings(); var readingId = $("#wrapper").data("reading-id") || null, langCode = $("#wrapper").data("lang-code") || null; if (readingBy) { var e = $(".select-reading-by[data-value=" + readingBy + "]"); e.addClass("active"), $("#reading-by").text(e.text()) } function getContinueReadingFromStorage() { try { var e = localStorage.getItem("mr_reading_" + mangaId); if (e) { if (e = JSON.parse(e), !readingBy) return (e = e.sort(compareValues("updated_at", "desc")))[0]; { let t = "chap" === readingBy ? 1 : 2, a = e.findIndex(e => e.type === t); return a >= 0 ? e[a] : null } } } catch (n) { } return null } function getChaptersOrVolumes() { $.get("/ajax/manga/reading-list/" + mangaId + "?readingBy=" + readingBy, function (e) { $("#reading-list").html(e.html), e.settings && (settings = e.settings), continueReading = e.continueReading || getContinueReadingFromStorage(), null === readingId && (continueReading ? (readingBy = 1 === continueReading.type ? "chap" : "vol", readingId = continueReading.reading_id, langCode = continueReading.lang_code) : ("" === readingBy && (readingBy = $(".select-reading-by").first().data("value")), null === langCode && (langCode = $(".lang-item[data-code=en]").length > 0 ? "en" : $(".lang-item").first().data("code")))), changeReadingBy(), $(".hr-navigation").show(), $(".lang-item[data-code=" + langCode + "]").click(); var t = $(".reading-list.active .reading-item[data-id=" + readingId + "]"); t.length > 0 ? t.click() : $(".reading-list.active .reading-item").last().click() }) } function changeReadingBy() { var e = $(".select-reading-by[data-value=" + readingBy + "]"); $(".select-reading-by").removeClass("active"), e.addClass("active"), $("#reading-by").text(e.text()) } function getImages() { settings.readingMode && readingId && (currentImageIndex = 0, $.get("/ajax/image/list/" + readingBy + "/" + readingId + "?mode=" + settings.readingMode + "&quality=" + settings.quality, function (e) { if (continueReading && continueReading.reading_id === parseInt(readingId) && (currentImageIndex = continueReading.image_number), $("#images-content").html(e.html), !($("#unlock-read").length > 0)) { if ("horizontal" === settings.readingMode) { if ((totalImage = $(".ds-image").length) <= 0) return; $(".hoz-total-image").text(totalImage), $(".hoz-controls").hide(), $(".hoz-controls-" + settings.readingDirection).show(), $("body").hasClass("page-reader-ver") && $("body").removeClass("page-reader-ver"); let t = window.innerHeight; document.getElementById("main-wrapper").style.height = t + "px", hozShowImage() } else { if ((totalImage = $(".iv-card").length) <= 0) return; currentImageIndex >= totalImage && (currentImageIndex = totalImage - 1), 1 === $(".reading-list.active .reading-item").length && $(".mrt-bottom").hide(), $(".reading-item.active").is(":last-child") && $("#ver-prev-cv").hide(), $(".reading-item.active").is(":first-child") && $("#ver-next-cv").hide(), 1 === parseInt($(".reading-item.active").data("reading-mode")) && $(".container-reader-chapter").addClass("no-margin"), $("body").hasClass("page-reader-ver") || $("body").addClass("page-reader-ver"), verShowImage(), window.addEventListener("scroll", handleVerticalScroll, { passive: !0 }); var a = $(".manga-name:first-child"); $(".chapter-name").text($("#current-chapter").text()), $(".manga-name").text(a.text()), $(".manga-name").parent().attr("href", a.parent().attr("href")), $(window).scrollTop(0) } isRead = !1, setTimeout(function () { $.post("/ajax/manga/count-view/" + readingId), voteInfo() }, 15e3) } })) } const isInViewport = e => { let t = window.innerHeight, a = e.getBoundingClientRect(), n = a.top / t; return n >= 0 && n <= 1 }; function getUrl(e, t) { return "https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?container=focus&resize_w=" + e + "&url=" + t } const listServer = ["x", "x2", "x", "x2", "x", "x2", "x", "x2", "x", "x2", "x", "x2"]; var hex2a = function (e) { for (var t = e.toString(), a = "", n = 0; n < t.length; n += 2)a += String.fromCharCode(parseInt(t.substr(n, 2), 16)); return a }; const keys = imageLoader.getKey(window.atob(hex2a(token))), factor = .2; function imgReverser(e) { return new Promise((t, a) => { var n = new Image; n.crossOrigin = "Anonymous", n.onload = function () { let e = imageLoader.decrypt(n, keys, .2); if ("undefined" != typeof userID && null !== userID) { let a = e.getContext("2d"); a.font = "bold 16px Arial", a.fillStyle = "rgba(255, 0, 0, 0.5)", a.fillText(userID, e.width / 1.2, e.height / 1.2), a.textAlign = "center", a.textBaseline = "middle" } return t(e) }, n.src = e }) } function createImageElement(e, t, a) { if (t.indexOf("scramble") > -1) imgReverser(t).then(t => { t && (t.classList.add(a), e.appendChild(t)) }); else { var n = document.createElement("img"), i = 0; n.classList.add(a), n.crossOrigin = "Anonymous", n.onerror = function () { if (void 0 !== listServer[i]) { n.src = t + "?" + listServer[i], i++; return } n.onerror = null, n.src = "https://cdn.dribbble.com/users/1026512/screenshots/10130839/waifu_laifu_404_copia_4x.png" }, n.onload = function () { e.classList.contains("img-loaded") || e.classList.add("img-loaded") }, e.appendChild(n), n.src = t } } function logReading() { let e = $(".reading-item.active"), t = e.data("id"), a = e.data("number"), n = "chap" === readingBy ? 1 : 2; if (oldImageIndex !== currentImageIndex) { continueReading = { manga_id: mangaId, reading_id: t, reading_number: a, type: n, lang_code: langCode, image_number: currentImageIndex, updated_at: Date.now() }, oldImageIndex = currentImageIndex, isLoggedIn && !1 === isRead && (isRead = !0, $.post("/ajax/user/log-reading", continueReading, function (e) { })); var i = localStorage.getItem("mr_reading_" + mangaId); if (i) { if ((i = JSON.parse(i)).length > 0) { var r = i.findIndex(e => e.type === n); r >= 0 ? i[r] = continueReading : i.push(continueReading) } } else i = [continueReading]; localStorage.setItem("mr_reading_" + mangaId, JSON.stringify(i)) } } function unlockChapter() { checkLogin() && $.post("/ajax/user/unlock-chapter", { reading_id: readingId }, function (e) { "ok" === e.status ? $(".reading-item.active").click() : alert(e.msg) }) } setInterval(logReading, 2e3), window.addEventListener("load", e => { setTimeout(function () { getCommentWidget() }, 1500) });
